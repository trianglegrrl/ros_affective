"""autogenerated by genmsg_py from motivation.msg. Do not edit."""
import roslib.message
import struct


class motivation(roslib.message.Message):
  _md5sum = "6ee482a245911d71a6f0f050b0bdf972"
  _type = "ros_affective/motivation"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 acceptance
float32 curiosity
float32 eating
float32 family
float32 honor
float32 idealism
float32 independence
float32 order
float32 physical_activity
float32 power
float32 romance
float32 saving
float32 social_contract
float32 status
float32 tranquility
float32 vengeance
"""
  __slots__ = ['acceptance','curiosity','eating','family','honor','idealism','independence','order','physical_activity','power','romance','saving','social_contract','status','tranquility','vengeance']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       acceptance,curiosity,eating,family,honor,idealism,independence,order,physical_activity,power,romance,saving,social_contract,status,tranquility,vengeance
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(motivation, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.acceptance is None:
        self.acceptance = 0.
      if self.curiosity is None:
        self.curiosity = 0.
      if self.eating is None:
        self.eating = 0.
      if self.family is None:
        self.family = 0.
      if self.honor is None:
        self.honor = 0.
      if self.idealism is None:
        self.idealism = 0.
      if self.independence is None:
        self.independence = 0.
      if self.order is None:
        self.order = 0.
      if self.physical_activity is None:
        self.physical_activity = 0.
      if self.power is None:
        self.power = 0.
      if self.romance is None:
        self.romance = 0.
      if self.saving is None:
        self.saving = 0.
      if self.social_contract is None:
        self.social_contract = 0.
      if self.status is None:
        self.status = 0.
      if self.tranquility is None:
        self.tranquility = 0.
      if self.vengeance is None:
        self.vengeance = 0.
    else:
      self.acceptance = 0.
      self.curiosity = 0.
      self.eating = 0.
      self.family = 0.
      self.honor = 0.
      self.idealism = 0.
      self.independence = 0.
      self.order = 0.
      self.physical_activity = 0.
      self.power = 0.
      self.romance = 0.
      self.saving = 0.
      self.social_contract = 0.
      self.status = 0.
      self.tranquility = 0.
      self.vengeance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_16f.pack(_x.acceptance, _x.curiosity, _x.eating, _x.family, _x.honor, _x.idealism, _x.independence, _x.order, _x.physical_activity, _x.power, _x.romance, _x.saving, _x.social_contract, _x.status, _x.tranquility, _x.vengeance))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.acceptance, _x.curiosity, _x.eating, _x.family, _x.honor, _x.idealism, _x.independence, _x.order, _x.physical_activity, _x.power, _x.romance, _x.saving, _x.social_contract, _x.status, _x.tranquility, _x.vengeance,) = _struct_16f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_16f.pack(_x.acceptance, _x.curiosity, _x.eating, _x.family, _x.honor, _x.idealism, _x.independence, _x.order, _x.physical_activity, _x.power, _x.romance, _x.saving, _x.social_contract, _x.status, _x.tranquility, _x.vengeance))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.acceptance, _x.curiosity, _x.eating, _x.family, _x.honor, _x.idealism, _x.independence, _x.order, _x.physical_activity, _x.power, _x.romance, _x.saving, _x.social_contract, _x.status, _x.tranquility, _x.vengeance,) = _struct_16f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_16f = struct.Struct("<16f")
