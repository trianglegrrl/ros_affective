"""autogenerated by genmsg_py from temperament.msg. Do not edit."""
import roslib.message
import struct


class temperament(roslib.message.Message):
  _md5sum = "d891d92b30bb43db8b4b44937adb2cc7"
  _type = "ros_affective/temperament"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 activity
float32 regularity
float32 approach_or_withdrawal
float32 adaptability
float32 intensity
float32 mood
float32 distractibility
float32 persistence_and_attention_span
float32 sensitivity

"""
  __slots__ = ['activity','regularity','approach_or_withdrawal','adaptability','intensity','mood','distractibility','persistence_and_attention_span','sensitivity']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       activity,regularity,approach_or_withdrawal,adaptability,intensity,mood,distractibility,persistence_and_attention_span,sensitivity
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(temperament, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.activity is None:
        self.activity = 0.
      if self.regularity is None:
        self.regularity = 0.
      if self.approach_or_withdrawal is None:
        self.approach_or_withdrawal = 0.
      if self.adaptability is None:
        self.adaptability = 0.
      if self.intensity is None:
        self.intensity = 0.
      if self.mood is None:
        self.mood = 0.
      if self.distractibility is None:
        self.distractibility = 0.
      if self.persistence_and_attention_span is None:
        self.persistence_and_attention_span = 0.
      if self.sensitivity is None:
        self.sensitivity = 0.
    else:
      self.activity = 0.
      self.regularity = 0.
      self.approach_or_withdrawal = 0.
      self.adaptability = 0.
      self.intensity = 0.
      self.mood = 0.
      self.distractibility = 0.
      self.persistence_and_attention_span = 0.
      self.sensitivity = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.activity, _x.regularity, _x.approach_or_withdrawal, _x.adaptability, _x.intensity, _x.mood, _x.distractibility, _x.persistence_and_attention_span, _x.sensitivity))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.activity, _x.regularity, _x.approach_or_withdrawal, _x.adaptability, _x.intensity, _x.mood, _x.distractibility, _x.persistence_and_attention_span, _x.sensitivity,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.activity, _x.regularity, _x.approach_or_withdrawal, _x.adaptability, _x.intensity, _x.mood, _x.distractibility, _x.persistence_and_attention_span, _x.sensitivity))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.activity, _x.regularity, _x.approach_or_withdrawal, _x.adaptability, _x.intensity, _x.mood, _x.distractibility, _x.persistence_and_attention_span, _x.sensitivity,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_9f = struct.Struct("<9f")
