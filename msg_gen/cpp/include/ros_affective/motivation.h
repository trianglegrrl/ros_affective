/* Auto-generated by genmsg_cpp for file /home/grrlbot/ros/ros_affective/msg/motivation.msg */
#ifndef ROS_AFFECTIVE_MESSAGE_MOTIVATION_H
#define ROS_AFFECTIVE_MESSAGE_MOTIVATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ros_affective
{
template <class ContainerAllocator>
struct motivation_ {
  typedef motivation_<ContainerAllocator> Type;

  motivation_()
  : acceptance(0.0)
  , curiosity(0.0)
  , eating(0.0)
  , family(0.0)
  , honor(0.0)
  , idealism(0.0)
  , independence(0.0)
  , order(0.0)
  , physical_activity(0.0)
  , power(0.0)
  , romance(0.0)
  , saving(0.0)
  , social_contract(0.0)
  , status(0.0)
  , tranquility(0.0)
  , vengeance(0.0)
  {
  }

  motivation_(const ContainerAllocator& _alloc)
  : acceptance(0.0)
  , curiosity(0.0)
  , eating(0.0)
  , family(0.0)
  , honor(0.0)
  , idealism(0.0)
  , independence(0.0)
  , order(0.0)
  , physical_activity(0.0)
  , power(0.0)
  , romance(0.0)
  , saving(0.0)
  , social_contract(0.0)
  , status(0.0)
  , tranquility(0.0)
  , vengeance(0.0)
  {
  }

  typedef float _acceptance_type;
  float acceptance;

  typedef float _curiosity_type;
  float curiosity;

  typedef float _eating_type;
  float eating;

  typedef float _family_type;
  float family;

  typedef float _honor_type;
  float honor;

  typedef float _idealism_type;
  float idealism;

  typedef float _independence_type;
  float independence;

  typedef float _order_type;
  float order;

  typedef float _physical_activity_type;
  float physical_activity;

  typedef float _power_type;
  float power;

  typedef float _romance_type;
  float romance;

  typedef float _saving_type;
  float saving;

  typedef float _social_contract_type;
  float social_contract;

  typedef float _status_type;
  float status;

  typedef float _tranquility_type;
  float tranquility;

  typedef float _vengeance_type;
  float vengeance;


private:
  static const char* __s_getDataType_() { return "ros_affective/motivation"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "6ee482a245911d71a6f0f050b0bdf972"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 acceptance\n\
float32 curiosity\n\
float32 eating\n\
float32 family\n\
float32 honor\n\
float32 idealism\n\
float32 independence\n\
float32 order\n\
float32 physical_activity\n\
float32 power\n\
float32 romance\n\
float32 saving\n\
float32 social_contract\n\
float32 status\n\
float32 tranquility\n\
float32 vengeance\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, acceptance);
    ros::serialization::serialize(stream, curiosity);
    ros::serialization::serialize(stream, eating);
    ros::serialization::serialize(stream, family);
    ros::serialization::serialize(stream, honor);
    ros::serialization::serialize(stream, idealism);
    ros::serialization::serialize(stream, independence);
    ros::serialization::serialize(stream, order);
    ros::serialization::serialize(stream, physical_activity);
    ros::serialization::serialize(stream, power);
    ros::serialization::serialize(stream, romance);
    ros::serialization::serialize(stream, saving);
    ros::serialization::serialize(stream, social_contract);
    ros::serialization::serialize(stream, status);
    ros::serialization::serialize(stream, tranquility);
    ros::serialization::serialize(stream, vengeance);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, acceptance);
    ros::serialization::deserialize(stream, curiosity);
    ros::serialization::deserialize(stream, eating);
    ros::serialization::deserialize(stream, family);
    ros::serialization::deserialize(stream, honor);
    ros::serialization::deserialize(stream, idealism);
    ros::serialization::deserialize(stream, independence);
    ros::serialization::deserialize(stream, order);
    ros::serialization::deserialize(stream, physical_activity);
    ros::serialization::deserialize(stream, power);
    ros::serialization::deserialize(stream, romance);
    ros::serialization::deserialize(stream, saving);
    ros::serialization::deserialize(stream, social_contract);
    ros::serialization::deserialize(stream, status);
    ros::serialization::deserialize(stream, tranquility);
    ros::serialization::deserialize(stream, vengeance);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(acceptance);
    size += ros::serialization::serializationLength(curiosity);
    size += ros::serialization::serializationLength(eating);
    size += ros::serialization::serializationLength(family);
    size += ros::serialization::serializationLength(honor);
    size += ros::serialization::serializationLength(idealism);
    size += ros::serialization::serializationLength(independence);
    size += ros::serialization::serializationLength(order);
    size += ros::serialization::serializationLength(physical_activity);
    size += ros::serialization::serializationLength(power);
    size += ros::serialization::serializationLength(romance);
    size += ros::serialization::serializationLength(saving);
    size += ros::serialization::serializationLength(social_contract);
    size += ros::serialization::serializationLength(status);
    size += ros::serialization::serializationLength(tranquility);
    size += ros::serialization::serializationLength(vengeance);
    return size;
  }

  typedef boost::shared_ptr< ::ros_affective::motivation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_affective::motivation_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct motivation
typedef  ::ros_affective::motivation_<std::allocator<void> > motivation;

typedef boost::shared_ptr< ::ros_affective::motivation> motivationPtr;
typedef boost::shared_ptr< ::ros_affective::motivation const> motivationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ros_affective::motivation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ros_affective::motivation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ros_affective

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ros_affective::motivation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ros_affective::motivation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ros_affective::motivation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6ee482a245911d71a6f0f050b0bdf972";
  }

  static const char* value(const  ::ros_affective::motivation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6ee482a245911d71ULL;
  static const uint64_t static_value2 = 0xa6f0f050b0bdf972ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_affective::motivation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ros_affective/motivation";
  }

  static const char* value(const  ::ros_affective::motivation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ros_affective::motivation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 acceptance\n\
float32 curiosity\n\
float32 eating\n\
float32 family\n\
float32 honor\n\
float32 idealism\n\
float32 independence\n\
float32 order\n\
float32 physical_activity\n\
float32 power\n\
float32 romance\n\
float32 saving\n\
float32 social_contract\n\
float32 status\n\
float32 tranquility\n\
float32 vengeance\n\
";
  }

  static const char* value(const  ::ros_affective::motivation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ros_affective::motivation_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ros_affective::motivation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.acceptance);
    stream.next(m.curiosity);
    stream.next(m.eating);
    stream.next(m.family);
    stream.next(m.honor);
    stream.next(m.idealism);
    stream.next(m.independence);
    stream.next(m.order);
    stream.next(m.physical_activity);
    stream.next(m.power);
    stream.next(m.romance);
    stream.next(m.saving);
    stream.next(m.social_contract);
    stream.next(m.status);
    stream.next(m.tranquility);
    stream.next(m.vengeance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct motivation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_affective::motivation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ros_affective::motivation_<ContainerAllocator> & v) 
  {
    s << indent << "acceptance: ";
    Printer<float>::stream(s, indent + "  ", v.acceptance);
    s << indent << "curiosity: ";
    Printer<float>::stream(s, indent + "  ", v.curiosity);
    s << indent << "eating: ";
    Printer<float>::stream(s, indent + "  ", v.eating);
    s << indent << "family: ";
    Printer<float>::stream(s, indent + "  ", v.family);
    s << indent << "honor: ";
    Printer<float>::stream(s, indent + "  ", v.honor);
    s << indent << "idealism: ";
    Printer<float>::stream(s, indent + "  ", v.idealism);
    s << indent << "independence: ";
    Printer<float>::stream(s, indent + "  ", v.independence);
    s << indent << "order: ";
    Printer<float>::stream(s, indent + "  ", v.order);
    s << indent << "physical_activity: ";
    Printer<float>::stream(s, indent + "  ", v.physical_activity);
    s << indent << "power: ";
    Printer<float>::stream(s, indent + "  ", v.power);
    s << indent << "romance: ";
    Printer<float>::stream(s, indent + "  ", v.romance);
    s << indent << "saving: ";
    Printer<float>::stream(s, indent + "  ", v.saving);
    s << indent << "social_contract: ";
    Printer<float>::stream(s, indent + "  ", v.social_contract);
    s << indent << "status: ";
    Printer<float>::stream(s, indent + "  ", v.status);
    s << indent << "tranquility: ";
    Printer<float>::stream(s, indent + "  ", v.tranquility);
    s << indent << "vengeance: ";
    Printer<float>::stream(s, indent + "  ", v.vengeance);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROS_AFFECTIVE_MESSAGE_MOTIVATION_H

