/* Auto-generated by genmsg_cpp for file /home/grrlbot/ros/ros_affective/msg/sense.msg */
#ifndef ROS_AFFECTIVE_MESSAGE_SENSE_H
#define ROS_AFFECTIVE_MESSAGE_SENSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ros_affective
{
template <class ContainerAllocator>
struct sense_ {
  typedef sense_<ContainerAllocator> Type;

  sense_()
  : what_happened()
  {
  }

  sense_(const ContainerAllocator& _alloc)
  : what_happened(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _what_happened_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  what_happened;


private:
  static const char* __s_getDataType_() { return "ros_affective/sense"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "fbeae60768b2db9ba5177a080c7a6733"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string what_happened\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, what_happened);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, what_happened);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(what_happened);
    return size;
  }

  typedef boost::shared_ptr< ::ros_affective::sense_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_affective::sense_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct sense
typedef  ::ros_affective::sense_<std::allocator<void> > sense;

typedef boost::shared_ptr< ::ros_affective::sense> sensePtr;
typedef boost::shared_ptr< ::ros_affective::sense const> senseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ros_affective::sense_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ros_affective::sense_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ros_affective

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ros_affective::sense_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ros_affective::sense_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ros_affective::sense_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fbeae60768b2db9ba5177a080c7a6733";
  }

  static const char* value(const  ::ros_affective::sense_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfbeae60768b2db9bULL;
  static const uint64_t static_value2 = 0xa5177a080c7a6733ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_affective::sense_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ros_affective/sense";
  }

  static const char* value(const  ::ros_affective::sense_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ros_affective::sense_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string what_happened\n\
";
  }

  static const char* value(const  ::ros_affective::sense_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ros_affective::sense_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.what_happened);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct sense_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_affective::sense_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ros_affective::sense_<ContainerAllocator> & v) 
  {
    s << indent << "what_happened: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.what_happened);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROS_AFFECTIVE_MESSAGE_SENSE_H

